/* DATE (SARS-CoV-2) SHAPE & COLOR */
//create a custom covid shape
const virshp = ["M27.91,1.13a4.43,4.43,0,0,0-1-.17c-.37,0-.94.09-1,.29s.1.76.22,1.13.65,1,.53,1.38a31.63,31.63,0,0,1-1.44,3.41,27.64,27.64,0,0,1-.88-3.85,10.55,10.55,0,0,1,.08-1.1c0-.37-.07-1-.16-1.05a2.91,2.91,0,0,0-1.47.17c-.18.08-.29.79-.13,1,.92,1.51.44,3.15.62,4.75-.49-.4-.9-1-1.3-1-.69,0-1.14.58-1.09,1.43-.59-1.16-1.09-2.31-1.57-3.46a.85.85,0,0,1-.06-.52C19.53,2.45,19.16,2,18,2.25c-.39.08-.95.41-1,.71s.38.74.63,1.09c.13.19.44.3.48.49.21,1,.35,2.05.52,3.08l-.25.09C17.8,6.36,17.28,5,16.7,3.65c-.14-.32-.55-.79-.73-.75a1.9,1.9,0,0,0-1.14.75c-.21.37,0,.84.58.92a.53.53,0,0,1,.36.25c.53,1.26,1,2.53,1.65,4-.45-.19-.67-.21-.75-.33a7.28,7.28,0,0,1-.81-1.33C15.33,6,14.31,5,14.35,3.53c0-.93-.88-1.24-1.65-.72a9.75,9.75,0,0,0-.84.59A1.09,1.09,0,0,0,12,5.3c.56.41,1.06.92,1.58,1.38-.43.16-.79,0-1,.15A4.82,4.82,0,0,0,11.4,8.1c-.09.15.27.82.53.9,1.06.33,1.37,1.27,1.89,2.05a1.42,1.42,0,0,1,.08.52c-.19,0-.39,0-.58,0a3.34,3.34,0,0,0-1,.16c-.34.17-.6.65-.91.67a2.29,2.29,0,0,1-1.18-.49c-.93-.6-1.84-1.24-2.74-1.89-.19-.13-.26-.41-.45-.55S6.26,8.94,6.18,9a11,11,0,0,0-1.13,1.4,9.13,9.13,0,0,0,1,.64c.42.21.88.34,1.32.51l0,.26c-1,.1-1.38.74-1.65,1.56s0,1.3.77,1.19c1.48-.21,2,1,2.85,1.78A30,30,0,0,1,5,15.07c-.27-.1-.39-.57-.66-.72S3.47,14,3.3,14.14c-.42.37-1.09.78-.68,1.51.1.2.67.38.77.29.76-.68,1.22-.07,1.76.31L7.46,17.8c.25.18.49.4.53.43a6.5,6.5,0,0,0-1.06,1.52c-.06.19.55.6.94,1l-.29,1A14,14,0,0,1,5.84,21,1.2,1.2,0,0,0,4,21.44a1.79,1.79,0,0,1-2,.46c-1.36-.81-1.85-.57-1.91,1a1.09,1.09,0,0,0,.43.88A2,2,0,0,0,1.6,23.7c.28-.06.56-.31.8-.27,1.31.21,2.6.49,3.9.75a1.24,1.24,0,0,1,1.08,1.23,4,4,0,0,1-.86,0A5.75,5.75,0,0,0,3,25.49c-.19.08-.49-.15-.74-.17-.44,0-1-.17-1.3,0a1.54,1.54,0,0,0-.45,1.28A4.44,4.44,0,0,0,1.34,28c.23.25.2.64.32,1s.32.67.56.73.93,0,1-.19c.32-.76.91-.55,1.46-.58a17.27,17.27,0,0,0,1.75-.17C8,28.52,8,28.53,8.28,30.06c.09.58.24,1.51,0,1.73-1.47,1.12-2.69,2.78-4.88,2.56a3.5,3.5,0,0,0-1,.31c.34.72.58,1.36.93,1.94s1.14.65,1.62,0A1.74,1.74,0,0,1,5.37,36c1.14-.55,2.27-1.11,3.43-1.58s2.63.77,2.29,1.89a8.36,8.36,0,0,1-1.56,2.41,1.49,1.49,0,0,1-.92.39c-.6.07-1.11.33-1,.94a4.58,4.58,0,0,0,.83,1.72,1.36,1.36,0,0,0,1,.4c.14,0,.36-.56.37-.87A1.45,1.45,0,0,1,11.77,40a1,1,0,0,0,1.37-.93c0-.19,0-.39-.06-.6,1.23.07,2.58,1.72,2.21,2.67-.43,1.12-.88,2.24-1.38,3.34-.09.21-.42.32-.62.49s-.68.6-1,.9a6.27,6.27,0,0,0,1.4,1c.31.11.78-.2,1.16-.35.05,0,0-.28,0-.43a2.16,2.16,0,0,1,.15-1c.58-.87,1.33-1.64,1.83-2.55a1.64,1.64,0,0,1,2.06-.89,15.79,15.79,0,0,1,2.14.6.93.93,0,0,1,.54.69,7.1,7.1,0,0,1-1.14,4.48c-.51.66-.31,1.15.51,1.35a4.6,4.6,0,0,0,1.54.25,2.37,2.37,0,0,0,1.26-.59c.11-.1-.12-.67-.28-1a1.31,1.31,0,0,1,.66-1.7c1.07-.39,1.19-.89.33-1.88l.76-.6a9,9,0,0,1,.38.84,3.54,3.54,0,0,1,.36,1.22c0,1.26.74,2.48,0,3.78-.2.38,0,1,.66.91a4.57,4.57,0,0,0,.74,0c.39-.08,1-.15,1.1-.38s-.22-.81-.27-1.23a11,11,0,0,1-.3-3.29c.15-.8.41-1.44-.38-2.2.81-.08,1.46-.16,2.1-.18.05,0,.1.38.17.57.15.38.3,1.08.46,1.08a3.06,3.06,0,0,0,1.66-.38c.18-.11.09-.8,0-1.2a3.32,3.32,0,0,0-.46-.87c1.72,1.65,3.12,3.46,2.7,6.12a9.27,9.27,0,0,0,1.31-.38c.28-.14.72-.41.71-.6s-.35-.58-.57-.85-.78-.67-1-1.09c-.44-1-.78-2.13-1.13-3.21a3.08,3.08,0,0,1,0-.86c.62.66,1.54,1.05,1.38,2.1a.39.39,0,0,0,.16.32c.65.25.68.78.77,1.37,0,.25.58.67.77.61A4.32,4.32,0,0,0,38,44.67.9.9,0,0,0,37.7,44c-1.08-.37-.77-1.11-.54-1.89.84.6,1.68,1.11,1.2,2.38-.09.22.24.69.49.89a.93.93,0,0,0,.81-.1,3.55,3.55,0,0,0,.89-.8c.16-.18.36-.53.29-.66a2,2,0,0,0-.73-.61c-.25-.14-.67-.13-.79-.33-.82-1.33-1.59-2.7-2.37-4.05,0,0,.07-.08-.07.08.61,0,1.16.16,1.45,0,.56-.38,1-.95.42-1.72-.11-.14,0-.41,0-.82,1.1.68,2,1.22,2.91,1.82.2.15.24.51.4.75a8.47,8.47,0,0,0,.58.76,6.14,6.14,0,0,0,.87-1.19c.06-.15-.39-.75-.55-.73C41.49,37.9,41,36.73,40,36c1.51-.48,2.16.88,3.24,1S45,38.17,45.76,39L47,37a19.83,19.83,0,0,1-2.06-.79c-.67-.36-1.27-.87-1.92-1.26s-1.39-.47-1.63-1.35c1.18.3,2.28.55,3.36.89a3.58,3.58,0,0,1,1,.75c.34.28.71.85,1,.8a1.85,1.85,0,0,0,1-.92,1.17,1.17,0,0,0,0-1.08c-.19-.23-.7-.22-1.07-.25s-.66.18-.87.07c-1.18-.68-2.32-1.42-3.47-2.14l.16-.29c1.15.5,2.57-.11,3.59,1.07a1.43,1.43,0,0,0,1.37-.17,2,2,0,0,0,.23-1.58,1.28,1.28,0,0,0-1.11-.52c-1.15.68-1.89-.17-2.55-.4l.28-2a6.69,6.69,0,0,1,1.18-.17,6.81,6.81,0,0,1,2.54.27c1.2.57,1.37.6,1.54-.74,0-.27-.06-.78-.17-.8a2.42,2.42,0,0,0-1,.12c-.39.08-.8.34-1.16.28a27.64,27.64,0,0,1-3.25-.7c-.31-.08-.76-.36-.8-.61A.85.85,0,0,1,44,24.41c1-.11,2.09,1,3.11-.06,0,0,.14.13.22.13.44,0,1,.16,1.27-.07A2.34,2.34,0,0,0,49.07,23a2.64,2.64,0,0,0-.26-1c.41,0,1,.08,1,0a3.32,3.32,0,0,0,0-1.22c0-.67-.39-.6-.89-.37a5,5,0,0,1-1.66.49c-1.19.05-2.38,0-3.58-.06a.77.77,0,0,1-.55-.25,22,22,0,0,1-1.05-2.05c-.06-.12,0-.43.11-.47.59-.29,1.06-.94,1.91-.48a.79.79,0,0,0,1.22-.68,15.58,15.58,0,0,0,0-2c.39-.05.87-.13,1.35-.16s1,0,.82-.61a8.15,8.15,0,0,0-1.19-1.77c-.15.29-.28.43-.29.57,0,1-.82,1.27-1.58,1.55-.57.22-1.14.46-1.71.71-1.8.78-3,.27-3.65-1.66.59-.41,1.17-.82.8-1.72-.06-.15.16-.5.33-.65,1-.84,2-1.62,3-2.47.19-.17.32-.71.21-.84-.39-.44-.91-1.11-1.35-1.09a5.48,5.48,0,0,0-2,.9.48.48,0,0,0-.11.43c.46,1.23-.5,1.66-1.25,2.15a2.72,2.72,0,0,1-3.44-.13,1.27,1.27,0,0,1-.3-1,19.6,19.6,0,0,1,1-1.92c.13-.25.11-.57.23-.82a4.29,4.29,0,0,1,.93-1.73c.65-.5.79-.57.11-1.08a11.57,11.57,0,0,0-1.16-.67,6.24,6.24,0,0,1-.29,1.72c-.23.44-.73.75-1.29,1.29-.17-1.34-1-1.5-1.72-1.65s-1,.28-.83,1a1.56,1.56,0,0,1,.06.85c-.3.7-.68,1.37-1.14,2.28-.64-.61-1.73-1.16-1.75-1.75a8.72,8.72,0,0,1,1.1-5,1.33,1.33,0,0,0,0-1.21C29.73-.24,28.26.18,27.91,1.13Z"];

//create rows for data flow (~2 rows for each month)
const row = 14; // number of shapes per row
const size = 75; // shape width
const sizeY = 100; // shape height

// create a custom color palette for the memory colors
const colorMem = d3.scaleOrdinal()
    .domain(["none", "#FFFFFF", "#000000", "#333333", "#666666", "#999999", "#CCCCCC", "#CCCC99", "#9999CC", "#666699", "#660000", "#663300", "#996633", "#003300", "#003333", "#003399", "#000066", "#330066", "#660066", "#990000", "#993300", "#CC9900", "#006600", "#336666", "#0033FF", "#000099", "#660099", "#990066", "#CC0000", "#CC3300", "#FFCC00", "#009900", "#006666", "#0066FF", "#0000CC", "#663399", "#CC0099", "#FF0000", "#FF3300", "#FFFF00", "#00CC00", "#009999", "#0099FF", "#0000FF", "#9900CC", "#FF0099", "#CC3333", "#FF6600", "#FFFF33", "#00FF00", "#00CCCC", "#00CCFF", "#3366FF", "#9933FF", "#FF00FF", "#FF6666", "#FF6633", "#FFFF66", "#66FF66", "#66CCCC", "#00FFFF", "#3399FF", "#9966FF", "#FF66FF", "#FF9999", "#FF9966", "#FFFF99", "#99FF99", "#66FFCC", "#99FFFF", "#66CCFF", "#9999FF", "#FF99FF", "#FFCCCC", "#FFCC99", "#FFFFCC", "#CCFFCC", "#99FFCC", "#CCFFFF", "#99CCFF", "#CCCCFF", "#FFCCFF"])
    .range(["none", "#FFFFFF", "#000000", "#333333", "#666666", "#999999", "#CCCCCC", "#CCCC99", "#9999CC", "#666699", "#660000", "#663300", "#996633", "#003300", "#003333", "#003399", "#000066", "#330066", "#660066", "#990000", "#993300", "#CC9900", "#006600", "#336666", "#0033FF", "#000099", "#660099", "#990066", "#CC0000", "#CC3300", "#FFCC00", "#009900", "#006666", "#0066FF", "#0000CC", "#663399", "#CC0099", "#FF0000", "#FF3300", "#FFFF00", "#00CC00", "#009999", "#0099FF", "#0000FF", "#9900CC", "#FF0099", "#CC3333", "#FF6600", "#FFFF33", "#00FF00", "#00CCCC", "#00CCFF", "#3366FF", "#9933FF", "#FF00FF", "#FF6666", "#FF6633", "#FFFF66", "#66FF66", "#66CCCC", "#00FFFF", "#3399FF", "#9966FF", "#FF66FF", "#FF9999", "#FF9966", "#FFFF99", "#99FF99", "#66FFCC", "#99FFFF", "#66CCFF", "#9999FF", "#FF99FF", "#FFCCCC", "#FFCC99", "#FFFFCC", "#CCFFCC", "#99FFCC", "#CCFFFF", "#99CCFF", "#CCCCFF", "#FFCCFF"]);

/*SVG SHAPE*/
//svg dimensions
const svgW = 1200; // svg width
const svgH = 3600; //svg height

/*INTERACTIVITY*/
//create tooltip
const tooltip = d3.select("#body")
    .append("div")
    .attr("id", "tooltip")
    .style("opacity", 0);
                
/*WORK WITH DATA*/
//create a time parser for date
const parseTime = d3.timeParse("%Y-%m-%d");

//load csv data
const data = d3.csv('data/itctimeline.csv')
    .then(data => {
        //parse the date data
        data.forEach(d => {
            d.date = parseTime(d.date);
            d.row = +d.row;
            d.cases = +d.cases;
            d.deaths = +d.deaths;
        });
        
        // calculate a max & min for dataset
        const dataMax = d3.max(data, d => +d.row);
        const dataMin = d3.min(data, d => +d.row);
        
        /*HISTORICAL EVENT ITOC COLOR PALETTE */
        //create a colorpalette for chist
        //if there is an historical covid event, a circle will be visible otherwise nothing
        const chistColor = d3.scaleOrdinal()
            .domain([dataMin, dataMax])
            .range(["#031f2a", "none"]);
        
        // create svg for chart - date specific
        const svg = d3.select('svg g.chart g.date')
            .attr("width", svgW)
            .attr("height", svgH);
        
        //create a group for shapes(dates)
        const g = svg.selectAll("g")
            .data(data, d => d)
            .enter()
            .append("g")
            .attr("transform", (_d, i) => {
                const x = (i % row + 0.3) * size;
                const y = (Math.floor(i / row) + 0.7) * sizeY;
                return 'translate(' + [x, y] + ')';
            })
            .attr("fill", d => colorMem(d.colorhex))
            .attr("stroke", "black")
            .attr("stroke-width", "0.25px");
        g.append("path")
            .attr("d", virshp);
        // add the date to the shape
        g.append("text")
            .attr("x", size / 4) //x coordinate
            .attr("y", size - 85) //y coordinate 
            .attr("text-anchor", "middle")//horizontal text align 
            .attr("font-size", "14px")
            .attr("font-weight", "bold")
            .attr("dy", "2px") //y offset 
            .text(d => (d.date.getMonth()+1)+"/"+ d.date.getDate()+'/'+d.date.getFullYear());
            //.text(d => date);
        
        
        // add covid case information below shape
        g.append("text")
            .attr("x", size / 4) //x coordinate
            .attr("y", size-25) //y coordinate 
            .attr("text-anchor", "middle")//horizontal text align 
            .attr("font-size", ".5em")
            .attr("dy", "10px") //y offset 
            .text(d => "Cases: " + d.cases);
        
        // add covid deaths information below cases
        g.append("text")
            .attr("x", size / 4) //x coordinate
            .attr("y", size-15) //y coordinate 
            .attr("text-anchor", "middle")//horizontal text align 
            .attr("font-size", ".5em")
            .attr("font-weight", "normal")
            .attr("dy", "9px") //y offset 
            .text(d => "Deaths: " + d.deaths);

           
        //create a group for chist
        d3.select('svg g.chart g.chist')
            .selectAll('circle')
            .data(data)
            .enter()
            .append("circle")
            .attr("class", "circles")
            .attr("cx", 50 / 2)
            .attr("cy", 50 / 2)
            .attr("r", 3.5)
            .attr("transform", (_d, i) => {
                const x = (i % row + 0.3) * size;
                const y = (Math.floor(i / row) + 0.7) * sizeY;
                return 'translate(' + [x, y] + ')';
            })
            .attr("fill", d => chistColor(d.chist))
            .attr("stroke", "black")
            .attr("stroke-width", "0.25px")
            .on("mouseover", (event, d) => {
                d3.select("#tooltip")
                    .transition()
                    .duration(300)
                    .attr('r', 8)
                    .style("opacity", 1)
                    .style('display', 'inline-block')
                    .style("left", (event.pageX) + "px")
                    .style("top", (event.pageY-15) + "px"
                    )
                    .select('.coviddate span')
                    .text((d.date.getMonth()+1)+"/"+ d.date.getDate()+'/'+d.date.getFullYear());
                d3.select("#tooltip")
                    .select("    "+'.covidcases span')
                    .text(d.cases);
                d3.select("#tooltip")
                    .select("    "+'.coviddeaths span')
                    .text(d.deaths);
                d3.select("#tooltip")
                    .select("    "+'.covidhist span')
                    .text(d.chist);
                d3.select("#tooltip")
                    .select("    "+'.memloc span')
                    .text(d.cloc);
                d3.select("#tooltip")
                    .select("    "+'.memory span')
                    .text(d.mem);
                d3.select("#tooltip")
                    .select("    "+'.memcolor span')
                    .text("    " + d.colorres);
                d3.select("#tooltip")
                    .select("    "+'.words span')
                    .text("    "+d.wrds);
                d3.select("#tooltip")
                    .select("    "+'.sentiment span')
                    .text("    "+d.sentiment);
            })
            .on("mouseout", (event, d) => {
                d3.select("#tooltip")
                    .transition()
                    .style("opacity", 0);
            })
            .on("mousemove", (event, d) => {
                d3.select("#tooltip")
                .style("left", (event.pageX) + "px")
                    .style("top", (event.pageY) + "px"
                    )
            });
            
    });